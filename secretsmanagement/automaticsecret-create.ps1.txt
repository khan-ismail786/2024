## Powershell Script to create a Service Principal and a secret. Save the secret in Azure Vault. Trigger an email to shared mailbox.
## Author : Ismail Khan
## Created on : 15th Nov 2022
## Last Modified By : Ismail Khan
## Last Modified Date : 15th Nov 2023
## For any information please reach out to "OCC_Engineering@ds.uhc.com"

param (
    [Parameter(Mandatory=$true)]
    [String]
    $NewApplicationName,
    [Parameter(Mandatory=$false)]
    [String]
    [ValidateSet('Critical','Major','Minor',IgnoreCase)]
    $Criticality='Major',
    [Parameter(Mandatory=$true)]
    [String]
    $OwnerName,
    [Parameter(Mandatory=$true)]
    [String]
    $OwnerEmail
)

# Variables of the Automation runbook
$TenantId = Get-AutomationVariable -Name "TenantID"
$ApplicationId = Get-AutomationVariable -Name "ApplicationID"
$SecuredPassword = Get-AutomationVariable -Name "SPSecret" | ConvertTo-SecureString -AsPlainText -Force 
$NonProdVaultName = Get-AutomationVariable -Name "AutomaticNonProdVaultName"
$ProdVaultName = Get-AutomationVariable -Name "AutomaticProdVaultName"

#Outputs
$adstatus = ""
$appstatus = ""
$appowneraccess = ""
$appsecretstatus = ""
$appvaultstatus = ""
$appvaultaccess = "NA"
$maskedsecret = "NA"
$operation = "Creation"
$secrettype = "Automatic"
$emaillist = ""
$comments = ""

"===================================================================================================="

try{
	#Create Credential and Connect to Azure AD
	"Connecting to Azure AD."
    $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $ApplicationId, $SecuredPassword
    Connect-MgGraph -ClientSecretCredential $Credential -TenantId $TenantId -NoWelcome
    Connect-AzAccount -ServicePrincipal -TenantId $TenantId -Credential $Credential
	$adStatus = "Pass"
    "Successfully Connected to Azure AD."

	"Checking Application already exists in Azure Active Directory."	
    $checkappexists = Get-MgApplication -Filter "DisplayName eq '$NewApplicationName'"
	if ($checkappexists -ne $null) {
        "Application with this name already exists in Azure Active Directory."
		$comments += " Application with this name already exists in Azure Active Directory."
		$appstatus = "Failed"
	}
	else {
		"Application with this name not found in Azure Active Directory."
        $AppDisplayNameLowercase = $NewApplicationName.ToLower()
        $AppDisplayNameWOSpecialChars = ($NewApplicationName -replace '[^a-zA-Z0-9]', '-')
        if (($AppDisplayNameLowercase.contains("uat") -or $AppDisplayNameLowercase.contains("stage") -or $AppDisplayNameLowercase.contains("test") -or $AppDisplayNameLowercase.contains("np") -or $AppDisplayNameLowercase.contains("nonprod") -or $AppDisplayNameLowercase.contains("non-prod") -or $AppDisplayNameLowercase.contains("qa") -or $AppDisplayNameLowercase.contains("dev") -or $AppDisplayNameLowercase.contains("nonprd") -or $AppDisplayNameLowercase.contains("non-prd")) {
            $EnvironmentType = 'Non-Prod'
            $VaultName = $NonProdVaultName
        }
        else {
            $EnvironmentType = 'Prod'
            $VaultName = $ProdVaultName
        }
		"Checking Application already exists in $VaultName Key Vault."
		$checksecretexists = Get-AzKeyVaultSecret -VaultName $VaultName -Name $AppDisplayNameWOSpecialChars -IncludeVersions
		if($checksecretexists -ne $null) {
            "Application with this name already exists in $VaultName Key Vault."
			$comments += " Application with this name already exists in $VaultName Key Vault."
			$appvaultstatus = "Failed"
		}
        else {
		    "Application with this name not found in $VaultName Key Vault."
		    "Checking if the Application is Deleted but not Purged yet in $VaultName Key Vault."
		    $checksecretexists = Get-AzKeyVaultSecret -VaultName $VaultName -Name $AppDisplayNameWOSpecialChars -InRemovedState
		    if($checksecretexists -ne $null) {
		    	"Application with this name already exists in $VaultName Key Vault in Deleted State."
                $comments += " Application with this name already exists in $VaultName Key Vault in Deleted State."
			    $appvaultstatus = "Failed"
		    }
		    else {
			    "Application with this name not found in $VaultName Key Vault in Deleted State."
				"Attempting to create Application in Azure Active Directory."
                $sp = New-MgApplication -DisplayName $NewApplicationName
                
				if ($sp -eq $null) {
                    "Application creation in Azure Active Directory failed."
				    $comments += " Application creation in Azure Active Directory failed."
				    $appstatus = "Failed"
			    }
			    else {
				    "Application created successfully."
				    $appstatus = "Pass"
                    "Attempting to set the Application Owner."
                    $User = Get-MgUser -UserId "$OwnerEmail"
                    if ($User -eq $null) {
                        "Could not find the Owner $OwnerEmail in Azure Active Directory. Hence, skipping addition of Application Owner in Azure Active Directory."
                        $comments += " Could not find the Owner $OwnerEmail in Azure Active Directory. Hence, skipping addition of Application Owner in Azure Active Directory."
                        $appowneraccess = "Failed"
                    }
                    else {
                        "Owner $OwnerEmail found in Azure Active Directory. Attempting to add the Application Owner."
                        $ObjectId = $User.ID
                        $NewOwner = @{
                        "@odata.id"= "https://graph.microsoft.com/v1.0/directoryObjects/{$ObjectId}"
                        }
                        $emaillist = $OwnerEmail
                        New-MgApplicationOwnerByRef -ApplicationId (Get-MgApplication -Filter "DisplayName eq '$NewApplicationName'").id -BodyParameter $NewOwner
                        "Application Owner added to the Application in Azure Active Directory."
                        $appowneraccess = "Pass"
                    }

                    "Attempting to create Application Secret in Azure Active Directory."
                    if( $Criticality -eq 'Critical') {
                        $endDateTime = (Get-Date).AddMonths(+6).ToUniversalTime()
                    }
                    elseif ($Criticality -eq 'Minor') {
                        $endDateTime = (Get-Date).AddMonths(+24).ToUniversalTime()
                    }
                    else {
                        $endDateTime = (Get-Date).AddMonths(+12).ToUniversalTime()
                    }

                    $passwordCred = @{
                    "displayName" = "SM" + (get-date -Format "yyyyMMdd-HHmm")
                    "endDateTime" = $endDateTime
                    }    
  
                    $secret = Add-MgApplicationPassword -ApplicationId (Get-MgApplication -Filter "DisplayName eq '$NewApplicationName'").id -PasswordCredential $passwordCred
                    if($secret -eq $null) {
                        "Application secret creation in Azure Active Directory failed."
				        $comments += " Application secret creation in Azure Active Directory failed."
				        $appsecretstatus = "Failed"
                    }
                    else {
                        "Application secret created successfully."
                        $appsecretstatus = "Pass"
                        "Attempting to save the secret in $VaultName Key Vault."
                        
			            $maskedsecret = ($secret.SecretText).substring(0, 3) + "********************"
                        $SecureSecret = $secret.SecretText | ConvertTo-SecureString -AsPlainText -Force
                        #"Saving : " + $VaultName + " | " + $AppDisplayNameWOSpecialChars + " | " + $sp.AppId + " | " + $maskedsecret + " | " + $secret.StartDateTime.ToUniversalTime() + " | " + $secret.EndDateTime.ToUniversalTime() + " | " + $NewApplicationName + " | " + $Criticality + " | " + $secret.DisplayName + " | " + $OwnerName + " | " + $OwnerEmail + " | " + $EnvironmentType + " | " + 'Automated' + " | " + 'No' + " | " + $secret.SecretText.length
                        $tags = @{ 'ApplicationName' = $NewApplicationName; 'ApplicationID' = $sp.AppId; 'ApplicationCriticality' = $Criticality; 'SecretName' = $secret.DisplayName; 'ApplicationOwner' = $OwnerName; 'ApplicationOwnerEmail' = $OwnerEmail; 'EnvironmentType' = $EnvironmentType; 'SecretType' = 'Automatic'; 'Encrypted' = 'No'; 'Size' = $secret.SecretText.length}
                        Set-AzKeyVaultSecret -VaultName $VaultName -Name $AppDisplayNameWOSpecialChars -SecretValue $SecureSecret -Expires $Secret.EndDateTime.ToUniversalTime() -NotBefore $Secret.StartDateTime.ToUniversalTime() -ContentType 'API Secret' -tags $tags >> $null

                        $checksecretexists = Get-AzKeyVaultSecret -VaultName $VaultName -Name $AppDisplayNameWOSpecialChars -IncludeVersions
				        if($checksecretexists -eq $null) {
                            "Saving the Secret to Azure Key Vault failed."
					        $comments += " Saving the Secret to Azure Key Vault failed."
					        $appvaultstatus = "Failed"
				        }
			            else {
				            "Secret saved successfully in Azure Key Vault."
                            $appvaultstatus = "Pass"

                            <#"Attempting to set Application Owner access to Azure Key Vault and Secret."
                            if ($User -eq $null){
                                "Skipping access to Azure Key Vault and Secret."
                                $comments += " Skipping access to Azure Key Vault and Secret."
                                $appvaultaccess = "Failed"
                            }
                            else
                            {
                                "Attempting to assign $OwnerEmail Azure Key Vault Reader access to $VaultName Key Vault"
                                $kvscope = "/subscriptions/ded80db8-7a8c-4beb-8ee2-6a3a540350f9/resourceGroups/rg01z001d000001/providers/Microsoft.KeyVault/vaults/kv01z001d000001"
                                $roles = Get-AzRoleAssignment -SignInName $OwnerEmail -Scope $kvscope
                                $checkaccess = $false
                                foreach ($role in $roles){
                                    if($role.RoleDefinitionName -eq "Key Vault Reader"){
                                        $checkaccess = $true
                                    }
                                }
                                if($checkaccess -eq $false) {
                                    New-AzRoleAssignment -ObjectId $User.Id -Scope $kvscope -RoleDefinitionId '21090545-7ca7-4776-b22c-e363652d74d2' >> $null
                                    "Assigned $OwnerEmail Azure Key Vault Reader access to $VaultName Key Vault"
                                }
                                else {
                                    "$OwnerEmail already has Azure Key Vault Reader access to the $VaultName Key Vault."
                                }

                                "Attempting to assign $OwnerEmail Owner access to the secret $AppDisplayNameWOSpecialChars."
                                $secretscope = $kvscope + "\secrets\$AppDisplayNameWOSpecialChars"
                                $roles = Get-AzRoleAssignment -SignInName $OwnerEmail -Scope $secretscope
                                $checkaccess = $false
                                foreach ($role in $roles){
                                    if($role.RoleDefinitionName -eq "Owner"){
                                        $checkaccess = $true
                                    }
                                }
                                if($checkaccess -eq $false) {
                                    New-AzRoleAssignment -ObjectId $User.Id -Scope $secretscope -RoleDefinitionId '8e3af657-a8ff-443c-a75c-2fe8c4bcb635' >> $null
                                    $roles = Get-AzRoleAssignment -SignInName $OwnerEmail -Scope $secretscope
                                    $checkaccess = $false
                                    foreach ($role in $roles){
                                        if($role.RoleDefinitionName -eq "Owner"){
                                            $checkaccess = $true
                                        }
                                    }
                                    if($checkaccess -eq $false) {
                                        "Failed to assign $OwnerEmail Owner access to the secret $AppDisplayNameWOSpecialChars."
                                        comments += " Failed to assign $OwnerEmail Owner access to the secret $AppDisplayNameWOSpecialChars."
                                        $appvaultaccess = "Failed"
                                    }
                                    else {
                                        "Assigned $OwnerEmail Owner access to the secret $AppDisplayNameWOSpecialChars."
                                        $appvaultaccess = "Pass"
                                    }
                                }
                                else {
                                    "$OwnerEmail already has Owner access to the secret $AppDisplayNameWOSpecialChars."
                                    $appvaultaccess = "Pass"
                                }
                            }#>
					        $comments += " Application along with Secret created and saved successfully."
                        }
				    }
			    }
		    }
        }
	}
}
catch{
	$comments += " Script Execution Failed."
    $exception = $true
}

# Create a JSON object for output to next step in Logic App workflow
$objOut = [PSCustomObject]@{
	operation       = $Operation
    adstatus        = $adStatus
	appstatus       = $appstatus 
    appowneraccess  = $appowneraccess
    appsecretstatus = $appsecretstatus
    appvaultstatus  = $appvaultstatus
    appvaultaccess  = $appvaultaccess
	appname         = $NewApplicationName
    maskedsecret    = $maskedsecret
	vaultname       = $VaultName
    secrettype      = $secrettype
	tenantId        = $TenantId
	comments        = $comments
    owneremail     = $emaillist
}

Write-Output ( $objOut | ConvertTo-Json)
$jsonBody = $objOut | ConvertTo-Json
Invoke-WebRequest -ContentType "application/json" -Method POST -Body $jsonBody -UseBasicParsing "https://prod-27.eastus.logic.azure.com:443/workflows/bb7d2fb66fe64da39e0f004dd33ec7d7/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=EKfn6UY5KCDWDuVedddbl-y0ryovYTvpPUKr5whjFag" >> $null

"===================================================================================================="
"Execution status: " + $comments
if(($appstatus -eq "Pass") -and ($appvaultstatus -eq "Pass") -and ($adStatus -eq "Pass") -and ($appsecretstatus -eq "Pass") -and !($exception)){
	"Result: Script completed Successfully."
}
else {
	"Result: Script execution failed."
}
"===================================================================================================="