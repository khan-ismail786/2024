## Powershell Script to delete an Application in Azure Active Directory and Azure Key Vault.
## Author : Ismail Khan
## Created on : 15th Nov 2022
## Last Modified By : 
## Last Modified Date : 
## For any information please reach out to "OCC_Engineering@ds.uhc.com"

param (
    [Parameter(Mandatory=$true)]
    [String]
    $ApplicationName
)

# Variables of the Automation runbook
$TenantId = Get-AutomationVariable -Name "TenantID"
$ApplicationId = Get-AutomationVariable -Name "ApplicationID"
$SecuredPassword = Get-AutomationVariable -Name "SPSecret" | ConvertTo-SecureString -AsPlainText -Force 
$NonProdVaultName = Get-AutomationVariable -Name "AutomaticNonProdVaultName"
$ProdVaultName = Get-AutomationVariable -Name "AutomaticProdVaultName"

#Outputs
$adstatus = ""
$appstatus = ""
$appowneraccess = "NA"
$appsecretstatus = "NA"
$appvaultstatus = ""
$appvaultaccess = "NA"
$maskedsecret = "NA"
$operation = "Decomission"
$secrettype = "Automatic"
$emaillist = ""
$comments = ""

"===================================================================================================="

try{
	#Create Credential and Connect to Azure AD
	"Connecting to Azure AD."
    $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $ApplicationId, $SecuredPassword
    Connect-MgGraph -ClientSecretCredential $Credential -TenantId $TenantId -NoWelcome
    Connect-AzAccount -ServicePrincipal -TenantId $TenantId -Credential $Credential
	$adStatus = "Pass"
    "Successfully Connected to Azure AD."

	"Checking if the Application is Deleted but not Purged yet"
    $AppDisplayNameLowercase = $ApplicationName.ToLower()
    $AppDisplayNameWOSpecialChars = ($ApplicationName -replace '[^a-zA-Z0-9]', '-')
    if (($AppDisplayNameLowercase.contains("uat") -or $AppDisplayNameLowercase.contains("stage") -or $AppDisplayNameLowercase.contains("test") -or $AppDisplayNameLowercase.contains("np") -or $AppDisplayNameLowercase.contains("nonprod") -or $AppDisplayNameLowercase.contains("non-prod") -or $AppDisplayNameLowercase.contains("qa") -or $AppDisplayNameLowercase.contains("dev") -or $AppDisplayNameLowercase.contains("nonprd") -or $AppDisplayNameLowercase.contains("non-prd")) {
        $EnvironmentType = 'Non-Prod'
        $VaultName = $NonProdVaultName
    }
    else {
        $EnvironmentType = 'Prod'
        $VaultName = $ProdVaultName
    }
	$checksecretexists = Get-AzKeyVaultSecret -VaultName $VaultName -Name $AppDisplayNameWOSpecialChars -InRemovedState
	if($checksecretexists -ne $null) {
		"Application Secret is already in Deleted state in Azure Key Vault."
		$comments += " Application Secret is already in Deleted state in Azure Key Vault."
		$appvaultstatus = "Pass"
	}
	else {
		"Application Secret not found in Deleted state."
		"Checking if Application Secret exists in Azure Key Vault."
		$rechecksecretexists = Get-AzKeyVaultSecret -VaultName $VaultName -Name $ApplicationName -IncludeVersions
		if($rechecksecretexists -eq $null) {
			"Application Secret does not exist in key vault."
			$comments += " Application Secret does not exist in Azure Key Vault."
			$appvaultstatus = "Pass"
		}
		else {	
			"Found the Application Secret in Azure Key Vault."
			"Attempting to soft delete the Application Secret in Azure Key Vault."
			Remove-AzKeyVaultSecret -VaultName $VaultName -Name $ApplicationName -Force >> $null
			Start-Sleep -Seconds 60
			$finalchecksecretexists = Get-AzKeyVaultSecret -VaultName $VaultName -Name $ApplicationName -IncludeVersions
			$finalchecksecretexists
			if($finalchecksecretexists -ne $null) {
				$comments += " Failed to delete the Application Secret in Azure Key Vault."
				$appvaultstatus = "Fail"
			}
			else {
				$comments += " Soft delete on Application Secret in Azure Key Vault successful."
				$appvaultstatus = "Pass"
			}
		}	
	}
	"Checking if the Application exists in Azure AD."
    $checkappexists = Get-MgApplication -Filter "DisplayName eq '$ApplicationName'"
	if($checkappexists -eq $null) {
		$appstatus = "Pass"
		$comments += "Application does not exist in Azure Active Directory."
	}
	else {
		"Application found in Azure Active Directory. Attempting to delete Application."
        $Owner = Get-MgApplicationOwner -ApplicationId $checkappexists.Id
        $emaillist = $Owner.AdditionalProperties.userPrincipalName -join ';'

        Get-MgApplication -Filter "DisplayName eq '$ApplicationName'" | ForEach-Object {Remove-MgApplication -ApplicationId $_.Id }
		Start-Sleep -Seconds 60
		$recheckappexists = Get-MgApplication -Filter "DisplayName eq '$ApplicationName'"
		if($recheckappexists -ne $null) {
			$appstatus = "Fail"
			$comments = "Failed to delete Application in Azure AD."
		}
		else {
			$appstatus = "Pass"
			$comments += "Soft delete on Application in Azure Active Directory successful."
		}
	}
}
catch{
	$comments += " Script Execution Failed."
    $exception = $true
}

# Create a JSON object for output to next step in Logic App workflow
$objOut = [PSCustomObject]@{
	operation       = $Operation
    adstatus        = $adStatus
	appstatus       = $appstatus 
    appowneraccess  = $appowneraccess
    appsecretstatus = $appsecretstatus
    appvaultstatus  = $appvaultstatus
    appvaultaccess  = $appvaultaccess
	appname         = $ApplicationName
    maskedsecret    = $maskedsecret
	vaultname       = $VaultName
    secrettype      = $secrettype
	tenantId        = $TenantId
	comments        = $comments
    owneremail     = $emaillist
}

Write-Output ( $objOut | ConvertTo-Json)
$jsonBody = $objOut | ConvertTo-Json
Invoke-WebRequest -ContentType "application/json" -Method POST -Body $jsonBody -UseBasicParsing "https://prod-27.eastus.logic.azure.com:443/workflows/bb7d2fb66fe64da39e0f004dd33ec7d7/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=EKfn6UY5KCDWDuVedddbl-y0ryovYTvpPUKr5whjFag" >> $null

"===================================================================================================="
"Execution status: " + $comments
if(($appstatus -eq "Pass") -and ($appvaultstatus -eq "Pass") -and ($adStatus -eq "Pass") -and !($exception)){
	"Result: Script completed Successfully."
}
else {
	"Result: Script execution failed."
}
"===================================================================================================="