## Powershell Script to update a Service Principal. As part of this update, a new secret is created,Saved in Azure Vault and an email is triggered to OCC shared mailbox.
## Author : Ismail Khan
## Created on : 15th Nov 2022
## Last Modified By : Ismail Khan
## Last Modified Date : 15th Nov 2023
## For any information please reach out to "OCC_Engineering@ds.uhc.com"

param (
    [Parameter (Mandatory = $true)]
    [object] $WebhookData
)

if(-not $WebhookData){
    write-output "No webhookdata found"
}
else{
    if(-Not $WebhookData.RequestBody){
        $requestbody = (ConvertFrom-Json -InputObject $WebhookData).RequestBody
    }
    else{
        $requestbody = $WebhookData.RequestBody
    }
    write-output "RequestBody $requestbody"
    if(-Not $requestbody.ApplicationName){
        $ApplicationName = (ConvertFrom-json -InputObject $requestbody).ApplicationName
    }
    else{
        $ApplicationName = $requestbody.ApplicationName
    }
    write-output "ApplicationName $ApplicationName"

    # Automation Runbook variables
    $TenantId = Get-AutomationVariable -Name "TenantID"
    $ApplicationId = Get-AutomationVariable -Name "ApplicationID"
    $SecuredPassword = Get-AutomationVariable -Name "SPSecret" | ConvertTo-SecureString -AsPlainText -Force
    $NonProdVaultName = Get-AutomationVariable -Name "AutomaticNonProdVaultName"
    $ProdVaultName = Get-AutomationVariable -Name "AutomaticProdVaultName"

    #Outputs
    $adstatus = ""
    $appstatus = ""
    $appowneraccess = "NA"
    $appsecretstatus = ""
    $appvaultstatus = ""
    $appvaultaccess = "NA"
    $maskedsecret = "NA"
    $operation = "Update"
    $secrettype = "Automatic"
    $emaillist = ""
    $comments = ""

    "===================================================================================================="
    try{
        #Below command is added to remove error:
        #Method 'get_SerializationSettings' in type 'Microsoft.Azure.Management.Internal.Resources.ResourceManagementClient' from assembly 'Microsoft.Azure.PowerShell.Clients.ResourceManager, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' does not have an implementation.
        Enable-AzureRmAlias -Scope CurrentUser -ErrorAction SilentlyContinue
	    #Create Credential and Connect to Azure
	    "Connecting to Azure."
        $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $ApplicationId, $SecuredPassword
        Connect-MgGraph -ClientSecretCredential $Credential -TenantId $TenantId -NoWelcome
        Connect-AzAccount -ServicePrincipal -TenantId $TenantId -Credential $Credential

        if ($adStatus -eq "") {
            "Successfully Connected to Azure."
            $adStatus = "Pass"

            "Checking Application exists in Azure Active Directory."
            $checkappexists = Get-MgApplication -Filter "DisplayName eq '$ApplicationName'"
            if ($checkappexists -eq $null) {
                "Application with this name not found in Azure Active Directory."
	            $comments += "Application with this name not found in Azure Active Directory."
	            $appstatus = "Failed"
            }
            elseif ((Get-MgApplication -Filter "DisplayName eq '$ApplicationName'").id -is [array]) {
                "Multiple Applications found with the same name. Hence aborting script."
                $comments += "Multiple Applications found with the same name. Hence aborting script."
                $appstatus = "Failed"
            }
            else {
	            "Application found in Azure Active Directory."
                $appstatus = "Pass"
                $AppDisplayNameWOSpecialChars = ($ApplicationName -replace '[^a-zA-Z0-9]', '-')
			    $AppDisplayNameLowercase = $ApplicationName.ToLower()
                if ($AppDisplayNameLowercase.contains("uat") -or $AppDisplayNameLowercase.contains("stage") -or $AppDisplayNameLowercase.contains("test") -or $AppDisplayNameLowercase.contains("np") -or $AppDisplayNameLowercase.contains("nonprod") -or $AppDisplayNameLowercase.contains("non-prod") -or $AppDisplayNameLowercase.contains("qa") -or $AppDisplayNameLowercase.contains("dev") -or $AppDisplayNameLowercase.contains("nonprd") -or $AppDisplayNameLowercase.contains("non-prd")) {
                    $EnvironmentType = 'Non-Prod'
                    $VaultName = $NonProdVaultName
                }
                else {
                    $EnvironmentType = 'Prod'
                    $VaultName = $ProdVaultName
                }

                "Checking if the Application Secret is Deleted but not Purged yet in $VaultName Key Vault."
			    $checksecretexists = Get-AzKeyVaultSecret -VaultName $VaultName -Name $AppDisplayNameWOSpecialChars -InRemovedState
			    if($checksecretexists -ne $null) {
                    "Application with this name already exists in $VaultName Key Vault in Deleted State. Kindly wait for the secret to be recovered/purged in Azure Key Vault."
				    $comments += "Application with this name already exists in $VaultName Key Vault in Deleted State. Kindly wait for the secret to be recovered/purged in Azure Key Vault."
			    	$appvaultstatus = "Failed"
			    }
			    else {
                    "Application with this name not found in $VaultName Key Vault in Deleted state."
                    "Retrieving the secret from $VaultName Key Vault"
                    $Criticality = ''
                    $checksecretexists = Get-AzKeyVaultSecret -VaultName $VaultName -Name $AppDisplayNameWOSpecialChars
                
                    if ($checksecretexists -ne $null) {
                        "Found Secret in $VaultName Key Vault. Retrieving the Criticality."
                        if (!([string]::IsNullOrEmpty($checksecretexists.Tags["ApplicationCriticality"]))) {
                            $Criticality = $checksecretexists.Tags["ApplicationCriticality"]
                        }
                    }
                    if ($Criticality -eq '') {
                        "Criticality is not available. Hence, setting the Criticality manually."
                        if ($EnvironmentType -eq 'Non-Prod') {
                            $Criticality = "Minor"
                        }
                        else {
                            $Criticality = "Major"
                        }
                    }

                    "Attempting to create new Application Secret in Azure Active Directory."
                    if($Criticality -eq 'Critical') {
                        $endDateTime = (Get-Date).AddMonths(+6).ToUniversalTime()
                    }
                    elseif ($Criticality -eq 'Minor') {
                        $endDateTime = (Get-Date).AddMonths(+24).ToUniversalTime()
                    }
                    else {
                        $endDateTime = (Get-Date).AddMonths(+12).ToUniversalTime()
                    }

                    $passwordCred = @{
                    "displayName" = "SM" + (get-date -Format "yyyyMMdd-HHmm")
                    "endDateTime" = $endDateTime
                    }
		            $secret = Add-MgApplicationPassword -ApplicationId (Get-MgApplication -Filter "DisplayName eq '$ApplicationName'").id -PasswordCredential $passwordCred
                    if($secret -eq $null) {
                        "Application Secret creation in Azure Active Directory failed."
			            $comments += " Application secret creation in Azure Active Directory failed."
			            $appsecretstatus = "Failed"
		            }
                    else {
		    	        "Application Secret created successfully."
	    		        $appsecretstatus = "Pass"
                        "Attempting to save the secret in $VaultName Key Vault."

                        $maskedsecret = ($secret.SecretText).substring(0, 3) + "********************"
                        $SecureSecret = $secret.SecretText | ConvertTo-SecureString -AsPlainText -Force        
                        $Owner = Get-MgApplicationOwner -ApplicationId $checkappexists.Id
                        $owneremail = $Owner.AdditionalProperties.userPrincipalName -join ';'
                        $emaillist = $Owner.AdditionalProperties.userPrincipalName -join ';'
                        $OwnerName  = $Owner.AdditionalProperties.displayName -join ';'
                        if ($null -eq $Owner.AdditionalProperties.userPrincipalName) {
                            $owneremail = @(
                                $Owner.AdditionalProperties.displayName
                                    '**<This is an Application>**'
                            ) -join ' '
                        }
                        if ($null -eq $Owner.AdditionalProperties.displayName) {
                            $owneremail = '<<No Owner>>'
                        }

                        "Saving : " + $VaultName + " | " + $AppDisplayNameWOSpecialChars + " | " + $checkappexists.AppId + " | " + $maskedsecret + " | " + $secret.StartDateTime + " | " + $secret.EndDateTime + " | " + $ApplicationName + " | " + $Criticality + " | " + $secret.DisplayName + " | " + $OwnerName + " | " + $OwnerEmail + " | " + $EnvironmentType + " | " + 'Automated' + " | " + 'No' + " | " + $secret.SecretText.length
                        $tags = @{ 'ApplicationName' = $ApplicationName; 'ApplicationID' = $checkappexists.AppId; 'ApplicationCriticality' = $Criticality; 'SecretName' = $secret.DisplayName; 'ApplicationOwner' = $OwnerName; 'ApplicationOwnerEmail' = $OwnerEmail; 'EnvironmentType' = $EnvironmentType; 'SecretType' = 'Automatic'; 'Encrypted' = 'No'; 'Size' = $secret.SecretText.length}
                        $keyvaultobject = Set-AzKeyVaultSecret -VaultName $VaultName -Name $AppDisplayNameWOSpecialChars -SecretValue $SecureSecret -Expires $Secret.EndDateTime -NotBefore $Secret.StartDateTime -ContentType 'API Secret' -tags $tags
                        if($keyvaultobject.version -eq $null) {
                            "Saving the Secret to $VaultName Key Vault failed."
					        $comments += " Saving the Secret to $VaultName Key Vault failed."
					        $appvaultstatus = "Failed"
				        }
				        else {
					        "New Application Secret saved successfully in $VaultName Key Vault."
                            $comments += " New Application Secret created and saved successfully."
					        $appvaultstatus = "Pass"
				        }
                    }
                }
            }		
        }
    }	
    catch{
	    $comments += "Script execution failed."
        $exception = $true
    }

    # Create a JSON object for output to next step in Logic App workflow
    $objOut = [PSCustomObject]@{
	    operation       = $Operation
        adstatus        = $adStatus
	    appstatus       = $appstatus 
        appowneraccess  = $appowneraccess
        appsecretstatus = $appsecretstatus
        appvaultstatus  = $appvaultstatus
        appvaultaccess  = $appvaultaccess
	    appname         = $ApplicationName
        maskedsecret    = $maskedsecret
	    vaultname       = $VaultName
        secrettype      = $secrettype
	    tenantId        = $TenantId
        owneremail      = $emaillist
	    comments        = $comments
    }

    Write-Output ( $objOut | ConvertTo-Json)
    $jsonBody = $objOut | ConvertTo-Json
    Invoke-WebRequest -ContentType "application/json" -Method POST -Body $jsonBody -UseBasicParsing "https://prod-27.eastus.logic.azure.com:443/workflows/bb7d2fb66fe64da39e0f004dd33ec7d7/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=EKfn6UY5KCDWDuVedddbl-y0ryovYTvpPUKr5whjFag" >> $null

    "===================================================================================================="
    "Execution status: " + $comments
    if(($appstatus -eq "Pass") -and ($appvaultstatus -eq "Pass") -and ($adStatus -eq "Pass") -and ($appsecretstatus -eq "Pass") -and !($exception)){
	    "Result: Script completed Successfully."
    }
    else {
	    "Result: Script execution failed."
    }
    "===================================================================================================="
}