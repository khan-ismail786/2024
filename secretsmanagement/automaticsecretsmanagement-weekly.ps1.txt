## Powershell Script to rotate Service Principal secrets
## Author : Ismail Khan
## Created on : 5th Nov 2023
## Last Modified By : 
## Last Modified Date : 
## For any information please reach out to "OCC_Engineering@ds.uhc.com"

# Variables of the Automation runbook
$TenantId = Get-AutomationVariable -Name "TenantID"
$ApplicationId = Get-AutomationVariable -Name "ApplicationID"
$SecuredPassword = Get-AutomationVariable -Name "SPSecret" | ConvertTo-SecureString -AsPlainText -Force

$NonProdVaultName = Get-AutomationVariable -Name "AutomaticNonProdVaultName"
$ProdVaultName = Get-AutomationVariable -Name "AutomaticProdVaultName"

$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $ApplicationId, $SecuredPassword
Connect-MgGraph -ClientSecretCredential $Credential -TenantId $TenantId -NoWelcome

$Now = Get-Date

$Applications = Get-MgApplication -All
"DisplayName | active | expiringthirtydays | expiringwithinthirtydays | almostexpiring | expired"
foreach ($App in ($Applications | Sort-Object -Property "DisplayName")) {
    $AppCreds = Get-MgApplication -ApplicationId $App.Id | Select-Object PasswordCredentials
    
    $Secrets = $AppCreds.PasswordCredentials
    $active = 0
    $expiringthirtydays = 0
    $expiringwithinthirtydays = 0
    $almostexpiring = 0
    $expired = 0

    $Owner = Get-MgApplicationOwner -ApplicationId $App.Id
    $OwnerEmail = $Owner.AdditionalProperties.userPrincipalName -join ';'
    $OwnerName  = $Owner.AdditionalProperties.displayName -join ';'
    foreach ($Secret in ($Secrets | Sort-Object -Property "EndDateTime")) {
        $RemainingDaysCount = ($Secret.EndDateTime - $Now).Days
        switch ($RemainingDaysCount) {
            {$_ -gt 30}                    { $active++; Break }
            {($_ -eq 30)}                  { $expiringthirtydays++; Break }
            {($_ -lt 30)  -and ($_ -gt 7)} { $expiringwithinthirtydays++; Break }
            {($_ -le 7) -and ($_ -gt 0)}   { $almostexpiring++; Break}
            {($_ -le 0)}                   { $expired++; Break}
        }
        $highestexpirydate = $Secret.EndDateTime
    }

    #$App.DisplayName + " | $active | $expiringthirtydays | $expiringwithinthirtydays | $almostexpiring | $expired"
    $AppDisplayNameLowercase = ($App.DisplayName).ToLower()
    if ($AppDisplayNameLowercase.contains("uat") -or $AppDisplayNameLowercase.contains("stage") -or $AppDisplayNameLowercase.contains("test") -or $AppDisplayNameLowercase.contains("np") -or $AppDisplayNameLowercase.contains("nonprod") -or $AppDisplayNameLowercase.contains("non-prod") -or $AppDisplayNameLowercase.contains("qa") -or $AppDisplayNameLowercase.contains("dev") -or $AppDisplayNameLowercase.contains("nonprd") -or $AppDisplayNameLowercase.contains("non-prd")) {
        $EnvironmentType = 'Non-Prod'
        $VaultName = $NonProdVaultName
    }
    else {
        $EnvironmentType = 'Prod'
        $VaultName = $ProdVaultName
    }
    
    if(($active -eq 0) -and ($expiringthirtydays -eq 0) -and ($expiringwithinthirtydays -gt 0)) {
        $App.DisplayName + " | $active | $expiringthirtydays | $expiringwithinthirtydays | $almostexpiring | $expired"
        # Create a JSON object for output to next step in Logic App workflow
        $objOut = [PSCustomObject]@{
            days = ($highestexpirydate -$Now).Days
	        owneremail = $OwnerEmail
            ownername = $OwnerName
	        applicationname = $App.DisplayName
            expirydate = $Secret.EndDateTime.toString()
            secrettype = "Automatic"
            environment = $EnvironmentType
            alerttype = "Weekly Alert"
            vaultname = $VaultName
        }
        Write-Output ( $objOut | ConvertTo-Json)
        $jsonBody = $objOut | ConvertTo-Json

        # tsh-sm-logicapp-rotationalert-prd-01
        Invoke-WebRequest -ContentType "application/json" -Method POST -Body $jsonBody -UseBasicParsing "https://prod-68.eastus.logic.azure.com:443/workflows/28a4967cb98d434fab0bf109b9e1191e/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=YFgP79fuTsj9EwSq7Ou19fnXqf83r9SkVIXxB3N79SE" >> $null
    }
}