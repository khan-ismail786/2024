## Powershell Script to create a Manual secret in Azure Key Vault and trigger an alert email.
## Author : Ismail Khan
## Created on : 15th Nov 2022
## Last Modified By : Ismail Khan
## Last Modified Date : 5th Feb 2024
## For any information please reach out to "OCC_Engineering@ds.uhc.com"

param (
    [Parameter(Mandatory=$true)]
    [String]
    $NewApplicationName,
    [Parameter(Mandatory=$true)]
    [String]
    $SecretName,
    [Parameter(Mandatory=$true)]
    [String]
    $SecretValue,
    [Parameter(Mandatory=$false)]
    [String]
    $ActivationDate,
    [Parameter(Mandatory=$false)]
    [String]
    $ExpirationDate,
    [Parameter(Mandatory=$false)]
    [String]
    $ContentType='Manual Secret',
    [Parameter(Mandatory=$false)]
    [String]
    [ValidateSet('Critical','Major','Minor',IgnoreCase)]
    $Criticality='Major',
    [Parameter(Mandatory=$true)]
    [String]
    $OwnerName,
    [Parameter(Mandatory=$true)]
    [String]
    $OwnerEmail,
    [Parameter(Mandatory=$false)]
    [String]
    [ValidateSet('Yes','No',IgnoreCase)]
    $Encrypted='No'
)

# Variables of the Automation runbook
$TenantId = Get-AutomationVariable -Name "TenantID"
$ApplicationId = Get-AutomationVariable -Name "ApplicationID"
$SecuredPassword = Get-AutomationVariable -Name "SPSecret" | ConvertTo-SecureString -AsPlainText -Force 
$NonProdVaultName = Get-AutomationVariable -Name "ManualNonProdVaultName"
$ProdVaultName = Get-AutomationVariable -Name "ManualProdVaultName"

#Outputs
$adstatus = "NA"
$appstatus = ""
$appowneraccess = "NA"
$appsecretstatus = ""
$appvaultstatus = ""
$appvaultaccess = "NA"
$maskedsecret = "NA"
$operation = "Creation"
$secrettype = "Manual"
$comments = ""

"===================================================================================================="

try{
	#Create Credential and Connect to Azure
	"Connecting to Azure."
    $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $ApplicationId, $SecuredPassword
    Connect-MgGraph -ClientSecretCredential $Credential -TenantId $TenantId -NoWelcome
    Connect-AzAccount -ServicePrincipal -TenantId $TenantId -Credential $Credential
    "Successfully Connected to Azure."

    $AppDisplayNameLowercase = $NewApplicationName.ToLower()
    $AppDisplayNameWOSpecialChars = ($NewApplicationName -replace '[^a-zA-Z0-9]', '-')
    if ($AppDisplayNameLowercase.contains("uat") -or $AppDisplayNameLowercase.contains("stage") -or $AppDisplayNameLowercase.contains("test") -or $AppDisplayNameLowercase.contains("np") -or $AppDisplayNameLowercase.contains("nonprod") -or $AppDisplayNameLowercase.contains("non-prod") -or $AppDisplayNameLowercase.contains("qa") -or $AppDisplayNameLowercase.contains("dev") -or $AppDisplayNameLowercase.contains("nonprd") -or $AppDisplayNameLowercase.contains("non-prd")) {
        $EnvironmentType = 'Non-Prod'
        $VaultName = $NonProdVaultName
    }
    else {
        $EnvironmentType = 'Prod'
        $VaultName = $ProdVaultName
    }
	"Checking Application already exists in $VaultName Key Vault."
	$checksecretexists = Get-AzKeyVaultSecret -VaultName $VaultName -Name $AppDisplayNameWOSpecialChars -IncludeVersions
	if($checksecretexists -ne $null) {
        "Application with this name already exists in $VaultName Key Vault."
		$comments += " Application with this name already exists in $VaultName Key Vault."
		$appvaultstatus = "Failed"
	}
    else {
	    "Application with this name not found in $VaultName Key Vault."
	    "Checking if the Application is Deleted but not Purged yet in $VaultName Key Vault."
		$checksecretexists = Get-AzKeyVaultSecret -VaultName $VaultName -Name $AppDisplayNameWOSpecialChars -InRemovedState
	    if($checksecretexists -ne $null) {
	    	"Application with this name already exists in $VaultName Key Vault in Deleted State."
            $comments += " Application with this name already exists in $VaultName Key Vault in Deleted State."
		    $appvaultstatus = "Failed"
	    }
	    else {
			"Application with this name not found in $VaultName Key Vault in Deleted State."
			
            "Validating Activation Date and Expiration Date."
            $appstatus = "Pass"
            $appsecretstatus = "Pass"

            if([string]::IsNullOrEmpty($ActivationDate)) {
                $ValidActivationDate = Get-Date
            }
            elseif(!($ActivationDate -as [DateTime])) {
                $appsecretstatus = "Fail"
            }
            else {
                $ValidActivationDate = [DateTime]::Parse($ActivationDate)
            }

            if([string]::IsNullOrEmpty($ExpirationDate)) {
                Switch ($Criticality)
                {
                    'Critical' {$ValidExpirationDate = (Get-Date).AddMonths(+6)}
                    'Major' {$ValidExpirationDate = (Get-Date).AddMonths(+12)}
                    'Minor' {$ValidExpirationDate = (Get-Date).AddMonths(+24)}
                    default {"Invalid criticality value provided."}
                }
            }
            elseif(!($ExpirationDate -as [DateTime])) {
                $appsecretstatus = "Fail"
            }
            else {
                $ValidExpirationDate = [DateTime]::Parse($ExpirationDate)
            }
            if($ValidActivationDate -ge $ValidExpirationDate)
            {
                $appsecretstatus = "Fail"
            }
            if ($appsecretstatus -eq "Fail") {
                "Invalid Activation and/or Expiration Date passed."
                $comments += " Invalid Activation and/or Expiration Date passed."
            }
            else {
                "Attempting to save the secret in $VaultName Key Vault."
                if($SecretValue.Length -lt 4){
                    $maskedsecret = "****"
                }
                else {
                    $maskedsecret = ($SecretValue).substring(0, 3) + "********************"
                }
                $SecureSecret = $SecretValue | ConvertTo-SecureString -AsPlainText -Force
                #"Saving : " + $VaultName + " | " + $AppDisplayNameWOSpecialChars + " | NA | " + $maskedsecret + " | " + $ActivationDate + " | " + $ExpirationDate + " | " + $NewApplicationName + " | " + $Criticality + " | " + $SecretName + " | " + $OwnerName + " | " + $OwnerEmail + " | " + $EnvironmentType + " | " + 'Manual' + " | " + $Encrypted + " | " + $SecretValue.length
                $tags = @{ 'ApplicationName' = $NewApplicationName; 'ApplicationID' = 'NA'; 'ApplicationCriticality' = $Criticality; 'SecretName' = $SecretName; 'ApplicationOwner' = $OwnerName; 'ApplicationOwnerEmail' = $OwnerEmail; 'EnvironmentType' = $EnvironmentType; 'SecretType' = 'Manual'; 'Encrypted' = $Encrypted; 'Size' = $SecretValue.length}
                Set-AzKeyVaultSecret -VaultName $VaultName -Name $AppDisplayNameWOSpecialChars -SecretValue $SecureSecret -Expires $ValidExpirationDate -NotBefore $ValidActivationDate -ContentType $ContentType -tags $tags >> $null

                $checksecretexists = Get-AzKeyVaultSecret -VaultName $VaultName -Name $AppDisplayNameWOSpecialChars -IncludeVersions
			    if($checksecretexists -eq $null) {
                    "Saving the Secret to Azure Key Vault failed."
				    $comments += " Saving the Secret to Azure Key Vault failed."
				    $appvaultstatus = "Failed"
			    }
		        else {
			        "Secret saved successfully in Azure Key Vault."
                    $appvaultstatus = "Pass"

                    <#"Attempting to set Application Owner access to Azure Key Vault and Secret."
                    $User = Get-MgUser -UserId "$OwnerEmail"
                    if ($User -eq $null){
                        "Skipping access to Azure Key Vault and Secret."
                        $comments += " Skipping access to Azure Key Vault and Secret."
                        $appvaultaccess = "Failed"
                    }
                    else
                    {
                        "Attempting to assign $OwnerEmail Azure Key Vault Reader access to $VaultName Key Vault"
                        $kvscope = "/subscriptions/ded80db8-7a8c-4beb-8ee2-6a3a540350f9/resourceGroups/rg01z001d000001/providers/Microsoft.KeyVault/vaults/kv01z001d000001"
                        $roles = Get-AzRoleAssignment -SignInName $OwnerEmail -Scope $kvscope
                        $checkaccess = $false
                        foreach ($role in $roles){
                            if($role.RoleDefinitionName -eq "Key Vault Reader"){
                                $checkaccess = $true
                            }
                        }
                        if($checkaccess -eq $false) {
                            New-AzRoleAssignment -ObjectId $User.Id -Scope $kvscope -RoleDefinitionId '21090545-7ca7-4776-b22c-e363652d74d2'
                            "Assigned $OwnerEmail Azure Key Vault Reader access to $VaultName Key Vault"
                        }
                        else {
                            "$OwnerEmail already has Azure Key Vault Reader access to the $VaultName Key Vault."
                        }

                        "Attempting to assign $OwnerEmail Owner access to the secret $AppDisplayNameWOSpecialChars."
                        $secretscope = $kvscope + "\secrets\$AppDisplayNameWOSpecialChars"
                        $roles = Get-AzRoleAssignment -SignInName $OwnerEmail -Scope $secretscope
                        $checkaccess = $false
                        foreach ($role in $roles){
                            if($role.RoleDefinitionName -eq "Owner"){
                                $checkaccess = $true
                            }
                        }
                        if($checkaccess -eq $false) {
                            New-AzRoleAssignment -ObjectId $User.Id -Scope $secretscope -RoleDefinitionId '8e3af657-a8ff-443c-a75c-2fe8c4bcb635'
                            $roles = Get-AzRoleAssignment -SignInName $OwnerEmail -Scope $secretscope
                            $checkaccess = $false
                            foreach ($role in $roles){
                                if($role.RoleDefinitionName -eq "Owner"){
                                    $checkaccess = $true
                                }
                            }
                            if($checkaccess -eq $false) {
                                "Failed to assign $OwnerEmail Owner access to the secret $AppDisplayNameWOSpecialChars."
                                comments += " Failed to assign $OwnerEmail Owner access to the secret $AppDisplayNameWOSpecialChars."
                                $appvaultaccess = "Failed"
                            }
                            else {
                                "Assigned $OwnerEmail Owner access to the secret $AppDisplayNameWOSpecialChars."
                                $appvaultaccess = "Pass"
                            }
                        }
                        else {
                            "$OwnerEmail already has Owner access to the secret $AppDisplayNameWOSpecialChars."
                            $appvaultaccess = "Pass"
                        }
                    }#>
			        $comments += " Manual secret saved successfully."
                }
            }
		}
	}
}
catch{
	$comments += " Script Execution Failed."
    $exception = $true
}

# Create a JSON object for output to next step in Logic App workflow
$objOut = [PSCustomObject]@{
	operation       = $Operation
    adstatus        = $adStatus
	appstatus       = $appstatus 
    appowneraccess  = $appowneraccess
    appsecretstatus = $appsecretstatus
    appvaultstatus  = $appvaultstatus
    appvaultaccess  = $appvaultaccess
	appname         = $NewApplicationName
    maskedsecret    = $maskedsecret
	vaultname       = $VaultName
	tenantId        = $TenantId
    secrettype      = $secrettype
	comments        = $comments
    owneremail      = $OwnerEmail
}

Write-Output ( $objOut | ConvertTo-Json)
$jsonBody = $objOut | ConvertTo-Json
Invoke-WebRequest -ContentType "application/json" -Method POST -Body $jsonBody -UseBasicParsing "https://prod-27.eastus.logic.azure.com:443/workflows/bb7d2fb66fe64da39e0f004dd33ec7d7/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=EKfn6UY5KCDWDuVedddbl-y0ryovYTvpPUKr5whjFag" >> $null

"===================================================================================================="
"Execution status: " + $comments

if(($appstatus -eq "Pass") -and ($appvaultstatus -eq "Pass") -and ($appsecretstatus -eq "Pass") -and !($exception)){
	"Result: Script completed Successfully."
}
else {
	"Result: Script execution failed."
}
"===================================================================================================="