## Powershell Script to manage Manual Secrets. This powershell script runs every day. It checks for expiring secrets and performs below action:
## 1. expiring in 30 days : Sends an alert email and raises a ServiceNow Request. 
## 2. expiring in <=7 days : Send daily alert emails
## Author : Ismail Khan
## Created on : 5th Nov 2023
## Last Modified By : 
## Last Modified Date : 
## For any information please reach out to "OCC_Engineering@ds.uhc.com"

# Variables of the Automation runbook
$TenantId = Get-AutomationVariable -Name "TenantID"
$ApplicationId = Get-AutomationVariable -Name "ApplicationID"
$SecuredPassword = Get-AutomationVariable -Name "SPSecret" | ConvertTo-SecureString -AsPlainText -Force 
$NonProdVaultName = Get-AutomationVariable -Name "ManualNonProdVaultName"
$ProdVaultName = Get-AutomationVariable -Name "ManualProdVaultName"

try{
    "Connecting to Azure."

    #Create Credential and Connect to Azure
    $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $ApplicationId, $SecuredPassword
    Connect-MgGraph -ClientSecretCredential $Credential -TenantId $TenantId -NoWelcome
    Connect-AzAccount -ServicePrincipal -TenantId $TenantId -Credential $Credential
    "Successfully Connected to Azure."
}
catch{
    "Failed to connect to Azure Active Directory."
}

$Now = Get-Date
"Checking Non-Prod Manual secrets."
$secrets = Get-AzKeyVaultSecret -VaultName $NonProdVaultName
foreach ($secret in $secrets){
    $AppDisplayNameLowercase = ($secret.Name).ToLower()
    if ($AppDisplayNameLowercase.contains("uat") -or $AppDisplayNameLowercase.contains("stage") -or $AppDisplayNameLowercase.contains("test") -or $AppDisplayNameLowercase.contains("np") -or $AppDisplayNameLowercase.contains("nonprod") -or $AppDisplayNameLowercase.contains("non-prod") -or $AppDisplayNameLowercase.contains("qa") -or $AppDisplayNameLowercase.contains("dev") -or $AppDisplayNameLowercase.contains("nonprd") -or $AppDisplayNameLowercase.contains("non-prd")) {
        $EnvironmentType = 'Non-Prod'
        $VaultName = $NonProdVaultName
    }
    else {
        $EnvironmentType = 'Prod'
        $VaultName = $ProdVaultName
    }
    $RemainingDaysCount = ($secret.Expires - $Now).Days
    "Checking : " + $secret.Name + " Days remaining : " + $RemainingDaysCount
    if(($RemainingDaysCount -le 7) -and ($RemainingDaysCount -gt 0)) {
        $secret.Name + " expiring in 7 days. Sending Alert."
        #Create a JSON object for output to next step in Logic App workflow
        $objOut = [PSCustomObject]@{
            days = $RemainingDaysCount
	        owneremail = $secret.Tags["ApplicationOwnerEmail"]
            ownername = $secret.Tags["ApplicationOwner"]
	        applicationname = $secret.Name
            expirydate = $secret.Expires.toString()
            secrettype = "Manual"
            environment = $EnvironmentType
            alerttype = "Daily Alert"
            vaultname = $VaultName
        }
        Write-Output ( $objOut | ConvertTo-Json)
        $jsonBody = $objOut | ConvertTo-Json
        Invoke-WebRequest -ContentType "application/json" -Method POST -Body $jsonBody -UseBasicParsing "https://prod-68.eastus.logic.azure.com:443/workflows/28a4967cb98d434fab0bf109b9e1191e/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=YFgP79fuTsj9EwSq7Ou19fnXqf83r9SkVIXxB3N79SE" >> $null
    }
    if($RemainingDaysCount -eq 30) {
        $secret.Name + " expiring in 30 days. Sending alert and creating SNOW ticket."
        #Create a JSON object for output to next step in Logic App workflow
        $objOut = [PSCustomObject]@{
            days = $RemainingDaysCount
	        owneremail = $secret.Tags["ApplicationOwnerEmail"]
            ownername = $secret.Tags["ApplicationOwner"]
	        applicationname = $secret.Name
            expirydate = $secret.Expires.toString()
            secrettype = "Manual"
            environment = $EnvironmentType
            alerttype = "Daily Alert"
            vaultname = $vaultname
        }
        Write-Output ( $objOut | ConvertTo-Json)
        $jsonBody = $objOut | ConvertTo-Json
        Invoke-WebRequest -ContentType "application/json" -Method POST -Body $jsonBody -UseBasicParsing "https://prod-68.eastus.logic.azure.com:443/workflows/28a4967cb98d434fab0bf109b9e1191e/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=YFgP79fuTsj9EwSq7Ou19fnXqf83r9SkVIXxB3N79SE" >> $null
        
        "Creating ServiceNow ticket"
        $user = Get-AutomationVariable -Name "ProdSNOWServiceAccount"
        $pass = Get-AutomationVariable -Name "ProdSNOWServiceAccountPassword"
        
        $secrettype = "Manual"
        $applicationname = $secret.Name
        $expirydate = $secret.Expires.toString()
        $owneremail = $secret.Tags["ApplicationOwnerEmail"]

        # Build auth header
        $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $user, $pass)))

        # Set proper headers
        $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
        $headers.Add('Authorization',('Basic {0}' -f $base64AuthInfo))
        $headers.Add('Accept','application/json')
        $headers.Add('Content-Type','application/json')

        # Specify endpoint uri
        $uri = "https://optumconnectprod.service-now.com/api/sn_sc/servicecatalog/items/074f8e721b03f190a24097da234bcb7b/add_to_cart"

        # Specify HTTP method
        $method = "post"

        # Specify request body
        $body = "{
            `"sysparm_quantity`": `"1`",
            `"variables`": {
                `"company`": `"09acf551134d9f80db4d38b2f244b028`",
                `"business_unit`": `"3515e4dedb2a334062239098f496190f`",
                `"department`": `"56ee52391befed10a24097da234bcb43`",
                `"secret_name`": `"$applicationname`",
                `"secret_expiration_date`": `"$expirydate`",
                `"description`": `"Secret expiring notice : \n\n Secret Name: $applicationname \n Secret Type: $secrettype \n Expiry Dt: $expirydate \n Environment: $environment \n VaultName: $vaultname \n OwnerEmail: $owneremail`"
            }
        }"

        # Send HTTP request
        $response = Invoke-RestMethod -Headers $headers -Method $method -Uri $uri -Body $body
        # Print response
        $response.RawContent

        #Submit Order

        # Specify endpoint uri
        $uri = "https://optumconnectprod.service-now.com/api/sn_sc/servicecatalog/cart/submit_order"

        # Send HTTP request
        $response = Invoke-RestMethod -Headers $headers -Method $method -Uri $uri  -ContentType "application/json"

        # Print response
        $response.RawContent
    }
}
"Checking Prod Manual secrets."
$secrets = Get-AzKeyVaultSecret -VaultName $ProdVaultName
foreach ($secret in $secrets){
    $RemainingDaysCount = ($secret.Expires - $Now).Days
    "Checking : " + $secret.Name + " .Days remaining : " + $RemainingDaysCount
    if(($RemainingDaysCount -le 7) -and ($RemainingDaysCount -gt 0)) {
        $secret.Name + " expiring in 7 days. Sending Alert."
        #Create a JSON object for output to next step in Logic App workflow
        $objOut = [PSCustomObject]@{
            days = $RemainingDaysCount
	        owneremail = $secret.Tags["ApplicationOwnerEmail"]
            ownername = $secret.Tags["ApplicationOwner"]
	        applicationname = $secret.Name
            expirydate = $secret.Expires.toString()
            secrettype = "Manual"
            environment = "Prod"
            alerttype = "Daily Alert"
            vaultname = $ProdVaultName
        }
        Write-Output ( $objOut | ConvertTo-Json)
        $jsonBody = $objOut | ConvertTo-Json
        Invoke-WebRequest -ContentType "application/json" -Method POST -Body $jsonBody -UseBasicParsing "https://prod-68.eastus.logic.azure.com:443/workflows/28a4967cb98d434fab0bf109b9e1191e/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=YFgP79fuTsj9EwSq7Ou19fnXqf83r9SkVIXxB3N79SE" >> $null
    }
    if($RemainingDaysCount -eq 30) {
        $secret.Name + " expiring in 30 days. Sending alert and creating SNOW ticket."
        #Create a JSON object for output to next step in Logic App workflow
        $objOut = [PSCustomObject]@{
            days = $RemainingDaysCount
            owneremail = $secret.Tags["ApplicationOwnerEmail"]
            ownername = $secret.Tags["ApplicationOwner"]
            applicationname = $secret.Name
            expirydate = $secret.Expires.toString()
            secrettype = "Manual"
            environment = "Prod"
            alerttype = "Daily Alert"
            vaultname = $ProdVaultName
        }
        Write-Output ( $objOut | ConvertTo-Json)
        $jsonBody = $objOut | ConvertTo-Json
        Invoke-WebRequest -ContentType "application/json" -Method POST -Body $jsonBody -UseBasicParsing "https://prod-68.eastus.logic.azure.com:443/workflows/28a4967cb98d434fab0bf109b9e1191e/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=YFgP79fuTsj9EwSq7Ou19fnXqf83r9SkVIXxB3N79SE" >> $null
        
        "Creating ServiceNow ticket"
        $user = Get-AutomationVariable -Name "DevSNOWServiceAccount"
        $pass = Get-AutomationVariable -Name "DevSNOWServiceAccountPassword"

        # Build auth header
        $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $user, $pass)))

        # Set proper headers
        $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
        $headers.Add('Authorization',('Basic {0}' -f $base64AuthInfo))
        $headers.Add('Accept','application/json')
        $headers.Add('Content-Type','application/json')

        # Specify endpoint uri
        $uri = "https://optumconnectprod.service-now.com/api/sn_sc/servicecatalog/items/074f8e721b03f190a24097da234bcb7b/add_to_cart"

        # Specify HTTP method
        $method = "post"

        # Specify request body
        $body = "{
            `"sysparm_quantity`": `"1`",
            `"variables`": {
                `"company`": `"09acf551134d9f80db4d38b2f244b028`",
                `"business_unit`": `"3515e4dedb2a334062239098f496190f`",
                `"department`": `"56ee52391befed10a24097da234bcb43`",
                `"secret_name`": `"$applicationname`",
                `"secret_expiration_date`": `"$expirydate`",
                `"description`": `"Secret expiring notice : \n\n Secret Name: $applicationname \n Secret Type: $secrettype \n Expiry Dt: $expirydate \n Environment: $environment \n VaultName: $vaultname \n OwnerEmail: $owneremail`"
            }
        }"

        # Send HTTP request
        $response = Invoke-RestMethod -Headers $headers -Method $method -Uri $uri -Body $body
        # Print response
        $response.RawContent

        #Submit Order

        # Specify endpoint uri
        $uri = "https://optumconnectprod.service-now.com/api/sn_sc/servicecatalog/cart/submit_order"

        # Send HTTP request
        $response = Invoke-RestMethod -Headers $headers -Method $method -Uri $uri  -ContentType "application/json"

        # Print response
        $response.RawContent
    }
}