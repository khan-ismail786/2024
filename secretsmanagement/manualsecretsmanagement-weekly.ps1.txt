## Powershell Script to manage Manual Secrets. This powershell script runs weekly once. It checks for expiring secrets and performs below action:
## 1. expiring within 30 days : Sends an alert email. 
## Author : Ismail Khan
## Created on : 5th Nov 2023
## Last Modified By : 
## Last Modified Date : 6th Feb 2023
## For any information please reach out to "OCC_Engineering@ds.uhc.com"

# Variables of the Automation runbook
$TenantId = Get-AutomationVariable -Name "TenantID"
$ApplicationId = Get-AutomationVariable -Name "ApplicationID"
$SecuredPassword = Get-AutomationVariable -Name "SPSecret" | ConvertTo-SecureString -AsPlainText -Force 
$NonProdVaultName = Get-AutomationVariable -Name "ManualNonProdVaultName"
$ProdVaultName = Get-AutomationVariable -Name "ManualProdVaultName"

try{
    "Connecting to Azure."

    #Create Credential and Connect to Azure
    $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $ApplicationId, $SecuredPassword
    Connect-MgGraph -ClientSecretCredential $Credential -TenantId $TenantId -NoWelcome
    Connect-AzAccount -ServicePrincipal -TenantId $TenantId -Credential $Credential
    "Successfully Connected to Azure."
    $Now = Get-Date
    "Checking Non-Prod Manual secrets."
    $secrets = Get-AzKeyVaultSecret -VaultName $NonProdVaultName
    foreach ($secret in $secrets){
        $RemainingDaysCount = ($secret.Expires - $Now).Days
        "Checking : " + $secret.Name + " .Days remaining : " + $RemainingDaysCount
        if(($RemainingDaysCount -lt 30) -and ($RemainingDaysCount -gt 7)) {
            $secret.Name + " expiring within 30 days. Sending Alert."
            #Create a JSON object for output to next step in Logic App workflow
            $objOut = [PSCustomObject]@{
                days = $RemainingDaysCount
	            owneremail = $secret.Tags["ApplicationOwnerEmail"]
                ownername = $secret.Tags["ApplicationOwner"]
	            applicationname = $secret.Name
                expirydate = $secret.Expires.toString()
                secrettype = "Manual"
                environment = "Non-Prod"
                alerttype = "Weekly Alert"
                vaultname = $NonProdVaultName
            }
            Write-Output ( $objOut | ConvertTo-Json)
            $jsonBody = $objOut | ConvertTo-Json
            Invoke-WebRequest -ContentType "application/json" -Method POST -Body $jsonBody -UseBasicParsing "https://prod-68.eastus.logic.azure.com:443/workflows/28a4967cb98d434fab0bf109b9e1191e/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=YFgP79fuTsj9EwSq7Ou19fnXqf83r9SkVIXxB3N79SE" >> $null
        }
    }
    "Checking Prod Manual secrets."
    $secrets = Get-AzKeyVaultSecret -VaultName $ProdVaultName
    foreach ($secret in $secrets){
        $RemainingDaysCount = ($secret.Expires - $Now).Days
        "Checking : " + $secret.Name + " .Days remaining : " + $RemainingDaysCount
        if(($RemainingDaysCount -lt 30) -and ($RemainingDaysCount -gt 7)) {
            $secret.Name + " expiring within 30 days. Sending Alert."
            #Create a JSON object for output to next step in Logic App workflow
            $objOut = [PSCustomObject]@{
                days = $RemainingDaysCount
	            owneremail = $secret.Tags["ApplicationOwnerEmail"]
                ownername = $secret.Tags["ApplicationOwner"]
	            applicationname = $secret.Name
                expirydate = $secret.Expires.toString()
                secrettype = "Manual"
                environment = "Prod"
                alerttype = "Weekly Alert"
                vaultname = $ProdVaultName
            }
            Write-Output ( $objOut | ConvertTo-Json)
            $jsonBody = $objOut | ConvertTo-Json
            Invoke-WebRequest -ContentType "application/json" -Method POST -Body $jsonBody -UseBasicParsing "https://prod-68.eastus.logic.azure.com:443/workflows/28a4967cb98d434fab0bf109b9e1191e/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=YFgP79fuTsj9EwSq7Ou19fnXqf83r9SkVIXxB3N79SE" >> $null
        }
    }
}
catch{
    "Failed to connect to Azure Active Directory."
}